load "infnear.mag";
load "zr.mag";
load "auxil.mag";

"defining Z^4";
sch4,mat4 := zr_aff(4);
Qn := BaseField(sch4);
ps4 := Curve(ProjectiveClosure(sch4));
rp := {@x: x in RationalPoints(Scheme(ps4,ps4.i)), i in [1..6]@};
"writing down an automorphism of the curve";
aut1 := map<c->c|[c.4,c.5,c.3,c.1,c.2,c.6]> where c is ps4;
fix1 := Scheme(ps4,[ps4.i*d[j]-ps4.j*d[i]: i,j in [1..6]]) where d is DefiningPolynomials(aut1);
assert Dimension(fix1) eq 0 and Degree(fix1) eq 2 and IsSingular(ps4!RationalPoints(fix1)[1]) and not IsReduced(fix1);
"finding a plane cubic model";
P2 := ProjectiveSpace(Qn,2);
to2 := map<sch4->P2|[sch4.4,sch4.5,1]>;
c2 := Curve(Image(to2));
to2 := map<sch4->c2|[sch4.4,sch4.5,1]>;
assert IsInvertible(to2);
"projectivizing";
pto2 := ProjectiveClosure(to2);
_,pfrom2 := IsInvertible(pto2);
pfrom2 := map<c2->Domain(pto2)|InverseDefiningPolynomials(pto2)>;  
"finding the points that come from the singular point";
sptback := Difference((Domain(pto2)![0,0,1,0,0,0])@@pfrom2,BaseScheme(pfrom2));
assert {@c2!i: i in RationalPoints(sptback)@} eq {@c2|[0,1,0],[-1,1,0]@};
"writing down some additional points";
ptsc2 := [c2![Qn.i*Qn.j,-Qn.i-Qn.j,1]: i,j in [1..4]|i lt j];
ptsc2 cat:= [c2|[0,1,0],[-1,1,0],[1,0,0],[0,-1,1]];
// 10 of these
assert forall{x: x in ptsc2|not IsFlex(x)};
"converting it to an elliptic curve";
jc2,tojc2 := EllipticCurve(c2,c2![0,1,0]);
jj := jInvariant(jc2);
"finding the images of known rational points";
ptsjc2 := [map_inf_near(c2,i,tojc2): i in ptsc2];    
"passing to a 2-isogenous curve";
twis := TwoIsogeny(DivisionPoints(jc2![0,1,0],2)[2]);
assert #{twis(i): i in ptsjc2} eq 5; // i.e., 5 pairs differing by 2-torsion
assert forall{x: x in [1..6]|Order(ptsjc2[x]-ptsjc2[7-x]) eq 2};
cod := Codomain(twis);
codpts := {@twis(i): i in ptsjc2@};
assert #codpts eq 5;
assert #DivisionPoints(cod![0,1,0],2) eq 2;
pt2cod := rep{x: x in DivisionPoints(cod![0,1,0],2)|x[3] ne 0};
pt2jc := rep{x: x in DivisionPoints(jc2![0,1,0],2)|x[3] ne 0}; 

"verifying some relations among the points";
assert &+ptsjc2[1..3] eq ptsjc2[10];
assert &+ptsjc2[4..6] eq ptsjc2[9];
assert &+codpts[1..3] eq codpts[5];

"translating to simplify the model";
trmap := map<jc2->AmbientSpace(jc2)|[jc2.1-pt2jc[1]*jc2.3,jc2.2,jc2.3]>;
jc2tr := Image(trmap);
assert forall{r: r in [1,3,5]|aInvariants(jc2tr)[r] eq 0};
// and y^2 = x(x^2+x+b) is the universal elliptic curve with a point of
// order 2, since its j-invariant has degree 3 in b.
// now, when we twist x(x^2+ax+b) to x(x^2+x+b/a^2), we divide the
// x-coordinates of all points by a.
ptstr := [trmap(i): i in ptsjc2];
A4 := Spec(Parent(Numerator(Qn.1)));
"defining the map given by the coefficients";
map4 := map<A4->A4|[a[4]/a[2]^2] cat [x[1]/a[2]: x in ptstr[1..3]]> where a is aInvariants(jc2tr);
manypts := [A4|[Random(1,100): i in [1..4]]: i in [1..100]];
"verifying numerically that the degree is 4";
manyback := [excise(i@@map4,BaseScheme(map4)): i in manypts];
// there is a base scheme and issues with affine vs. projective.  But we'd be
// very unlucky for this to fail:
assert #[x: x in manyback|Dimension(x) eq 0 and Degree(x) eq 4] ge 80;
assert forall{x: x in manyback|Dimension(x) gt 0 or Degree(x) le 4};
// so it looks like the map has degree 4.

// What does that mean?  The A4 here is parametrizing elliptic curves with
// a point of order 2 by j-invariant.  Forgetting each pair of +- costs us
// degree 2, but the first one doesn't because we can change signs.

"writing down the generic point and pulling it back";
A4q4 := ChangeRing(A4,Qn);
gpt := A4q4![Qn.i: i in [1..4]]; 
map4q4 := map<A4q4->A4q4|[Evaluate(i,[A4q4.j: j in [1..4]]): i in DefiningPolynomials(map4)]>;
gptback := gpt@@map4q4;         
// We'd like to do this computation:
/*
gptback := excise(gptback,BaseScheme(map4q4));
assert Degree(gptback) eq 4;
*/
// but I doubt that Magma will let us.
// On the other hand, we can do this:
"removing the base scheme (2 minutes)";
gptback := Difference(gptback,BaseScheme(map4q4));
"checking that the degree is now 6 and that it still meets the base scheme in degree 2";
assert Dimension(gptback) eq 0 and Degree(gptback) eq 6;
assert Degree(gptback meet BaseScheme(map4q4)) eq 2;

gptback := Difference(gptback,BaseScheme(map4q4));
// in fact the points are (0,0,0,0) and (1,1,1,1)
elp := Evaluate(Basis(EliminationIdeal(Ideal(gptback),{4}))[1],[0,0,0,PolynomialRing(Qn).1]);
"verifying that the inverse image of the generic point is reduced";
assert IsSquarefree(elp) and Degree(elp) eq 6;
// showing that everything is reduced and allowing us to conclude that the
// degree is 4.

